// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef FCRCORE_SWIFT_H
#define FCRCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AgoraRte;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FcrCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class NSString;
@class AgoraRteAudioRawData;

SWIFT_PROTOCOL("_TtP7FcrCore29FcrAudioRawOutputDataObserver_")
@protocol FcrAudioRawOutputDataObserver <NSObject>
@optional
- (void)onAudioRawDataBeforeMixedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId data:(AgoraRteAudioRawData * _Nonnull)data;
- (void)onAudioRawDataMixedWithRoomId:(NSString * _Nonnull)roomId data:(AgoraRteAudioRawData * _Nonnull)data;
@end

typedef SWIFT_ENUM(NSInteger, FcrBoardInactiveReason, open) {
  FcrBoardInactiveReasonClose = 1,
  FcrBoardInactiveReasonTimeout = 2,
  FcrBoardInactiveReasonSeize = 3,
  FcrBoardInactiveReasonPermissionReclaimed = 4,
};

@class AgoraError;
@protocol FcrBoardRoomMainWindow;
@class UIColor;
@class UIView;
@protocol FcrBoardRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrBoardRoomControl_")
@protocol FcrBoardRoomControl <NSObject>
- (void)activeWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)inactiveWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)openWithSuccess:(void (^ _Nullable)(id <FcrBoardRoomMainWindow> _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)close;
- (void)setBackgroundColor:(UIColor * _Nonnull)color hexString:(NSString * _Nullable)hexString success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (BOOL)getActivity SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getOwnerId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteConnectionState)getConnectionState SWIFT_WARN_UNUSED_RESULT;
- (id <FcrBoardRoomMainWindow> _Nullable)getMainWindow SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)getContentView SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrBoardRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrBoardRoomObserver> _Nonnull)observer;
@end

enum FcrBoardToolType : NSInteger;
@class UIImage;

SWIFT_PROTOCOL("_TtP7FcrCore22FcrBoardRoomMainWindow_")
@protocol FcrBoardRoomMainWindow <NSObject>
- (void)undo;
- (void)redo;
- (void)clean;
- (void)setToolTypeWithToolType:(enum FcrBoardToolType)toolType;
- (void)setStrokeWidthWithStrokeWidth:(CGFloat)strokeWidth;
- (void)setStrokeColorWithStrokeColor:(UIColor * _Nonnull)strokeColor;
- (void)setTextColorWithTextColor:(UIColor * _Nonnull)textColor;
- (void)setTextSizeWithTextSize:(CGFloat)textSize;
- (void)setBackgroundColorWithBackgroudColor:(UIColor * _Nonnull)backgroudColor;
- (void)getSnapshotImageWithSuccess:(void (^ _Nullable)(UIImage * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
@end

@class FcrUserInfo;

SWIFT_PROTOCOL("_TtP7FcrCore20FcrBoardRoomObserver_")
@protocol FcrBoardRoomObserver <NSObject>
@optional
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
- (void)onUndoStateUpdatedWithEnable:(BOOL)enable;
- (void)onRedoStateUpdatedWithEnable:(BOOL)enable;
- (void)onActiveWithOwnerId:(NSString * _Nonnull)ownerId operatorUser:(FcrUserInfo * _Nullable)operatorUser;
- (void)onInactiveWithReason:(enum FcrBoardInactiveReason)reason operatorUser:(FcrUserInfo * _Nullable)operatorUser;
- (void)onBackgroundColorUpdatedWithColor:(NSString * _Nonnull)color operatorUser:(FcrUserInfo * _Nullable)operatorUser;
@end

typedef SWIFT_ENUM(NSInteger, FcrBoardToolType, open) {
  FcrBoardToolTypeNone = 0,
  FcrBoardToolTypeSelector = 1,
  FcrBoardToolTypeLaserPointer = 2,
  FcrBoardToolTypeEraser = 3,
  FcrBoardToolTypeText = 4,
  FcrBoardToolTypeCurve = 5,
  FcrBoardToolTypeStraight = 6,
  FcrBoardToolTypeArrow = 7,
  FcrBoardToolTypeRectangle = 8,
  FcrBoardToolTypeTriangle = 9,
  FcrBoardToolTypeRhombu = 10,
  FcrBoardToolTypePentagra = 11,
  FcrBoardToolTypeEllips = 12,
};

@class FcrChatRoomSendBaseMessage;
@class FcrChatRoomReceivedBaseMessage;
@protocol FcrChatRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore18FcrChatRoomControl_")
@protocol FcrChatRoomControl <NSObject>
- (AgoraRteConnectionState)getConnectionState SWIFT_WARN_UNUSED_RESULT;
- (void)sendMessageWithMessage:(FcrChatRoomSendBaseMessage * _Nonnull)message success:(void (^ _Nullable)(FcrChatRoomReceivedBaseMessage * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrChatRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrChatRoomObserver> _Nonnull)observer;
@end

typedef SWIFT_ENUM(NSInteger, FcrChatRoomMessageType, open) {
  FcrChatRoomMessageTypeText = 0,
  FcrChatRoomMessageTypeImage = 1,
  FcrChatRoomMessageTypeCustom = 2,
};

@class FcrChatRoomReceivedTextMessage;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrChatRoomObserver_")
@protocol FcrChatRoomObserver <NSObject>
@optional
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
- (void)onTextMessageReceivedWithMessage:(FcrChatRoomReceivedTextMessage * _Nonnull)message;
@end


SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceivedBaseMessage")
@interface FcrChatRoomReceivedBaseMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull from;
@property (nonatomic, readonly) enum FcrChatRoomMessageType type;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable to;
@property (nonatomic) NSUInteger timestamp;
@property (nonatomic) BOOL isPrivate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceiveImageMessage")
@interface FcrChatRoomReceiveImageMessage : FcrChatRoomReceivedBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly) NSUInteger width;
@property (nonatomic, readonly) NSUInteger height;
@end



SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceivedTextMessage")
@interface FcrChatRoomReceivedTextMessage : FcrChatRoomReceivedBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrChatRoomSendBaseMessage")
@interface FcrChatRoomSendBaseMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore28FcrChatRoomSendCustomMessage")
@interface FcrChatRoomSendCustomMessage : FcrChatRoomSendBaseMessage
@end

@class NSData;

SWIFT_CLASS("_TtC7FcrCore27FcrChatRoomSendImageMessage")
@interface FcrChatRoomSendImageMessage : FcrChatRoomSendBaseMessage
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSUInteger width;
@property (nonatomic, readonly) NSUInteger height;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrChatRoomSendTextMessage")
@interface FcrChatRoomSendTextMessage : FcrChatRoomSendBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
- (nonnull instancetype)initWithContent:(NSString * _Nonnull)content properties:(NSDictionary<NSString *, id> * _Nullable)properties to:(NSArray<NSString *> * _Nullable)to OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, FcrCloudRecordingAudioProfile, open) {
  FcrCloudRecordingAudioProfileMusicMono48K = 0,
  FcrCloudRecordingAudioProfileMusicMono128K = 1,
  FcrCloudRecordingAudioProfileMusicStereo192K = 2,
};

@class AgoraRteVideoEncoderConfig;

SWIFT_CLASS("_TtC7FcrCore23FcrCloudRecordingConfig")
@interface FcrCloudRecordingConfig : NSObject
@property (nonatomic, readonly, strong) AgoraRteVideoEncoderConfig * _Nonnull videoEncoderConfig;
@property (nonatomic, readonly) enum FcrCloudRecordingAudioProfile audioProfile;
- (nonnull instancetype)initWithVideoEncoderConfig:(AgoraRteVideoEncoderConfig * _Nonnull)videoEncoderConfig audioProfile:(enum FcrCloudRecordingAudioProfile)audioProfile OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FcrCreateRoomControlConfig;
@protocol FcrMainRoomControl;
@protocol FcrMediaControl;
@protocol FcrMonitorControl;
@protocol FcrPeerSessionControl;
@protocol FcrCoreEngineObserver;

SWIFT_CLASS("_TtC7FcrCore13FcrCoreEngine")
@interface FcrCoreEngine : NSObject
- (void)loginWithUserToken:(NSString * _Nonnull)userToken success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)logout;
- (id <FcrMainRoomControl> _Nullable)createRoomControlWithConfig:(FcrCreateRoomControlConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (id <FcrMediaControl> _Nonnull)getMediaControl SWIFT_WARN_UNUSED_RESULT;
- (id <FcrMonitorControl> _Nonnull)getMonitorControl SWIFT_WARN_UNUSED_RESULT;
- (void)sendPeerMessageWithPayload:(NSDictionary<NSString *, id> * _Nonnull)payload guaranteedDelivery:(BOOL)guaranteedDelivery receiverId:(NSString * _Nonnull)receiverId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (id <FcrPeerSessionControl> _Nullable)getPeerSessionControl SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrCoreEngineObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrCoreEngineObserver> _Nonnull)observer;
- (void)setParametersWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AgoraRteMessage;

@interface FcrCoreEngine (SWIFT_EXTENSION(FcrCore)) <AgoraRteEngineDelegate>
- (void)onPeerMessageReceived:(AgoraRteMessage * _Nonnull)message;
- (void)onConnectionStateUpdated:(AgoraRteConnectionState)state;
@end


@class AgoraRteDualVideoStreamConfig;

SWIFT_CLASS("_TtC7FcrCore19FcrCoreEngineConfig")
@interface FcrCoreEngineConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly) AgoraRteRegion region;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userProperties;
@property (nonatomic, readonly, strong) AgoraRteDualVideoStreamConfig * _Nonnull dualCameraVideoStreamConfig;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable parameters;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId token:(NSString * _Nonnull)token region:(AgoraRteRegion)region userId:(NSString * _Nonnull)userId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties dualCameraVideoStreamConfig:(AgoraRteDualVideoStreamConfig * _Nonnull)dualCameraVideoStreamConfig parameters:(NSDictionary<NSString *, id> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId token:(NSString * _Nonnull)token region:(AgoraRteRegion)region userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FcrMessage;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrCoreEngineObserver_")
@protocol FcrCoreEngineObserver <NSObject>
@optional
- (void)onPeerMessageReceivedWithMessage:(FcrMessage * _Nonnull)message;
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrCreateRoomControlConfig")
@interface FcrCreateRoomControlConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
- (nonnull instancetype)initWithRoomId:(NSString * _Nonnull)roomId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FcrDeviceType, open) {
  FcrDeviceTypeCamera = 1,
  FcrDeviceTypeMicrophone = 2,
  FcrDeviceTypeSpeaker = 3,
};

@class FcrGroupInfo;

SWIFT_CLASS("_TtC7FcrCore18FcrGroupAddedEvent")
@interface FcrGroupAddedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrGroupCreateConfig;
@class FcrGroupUpdateOptions;
@protocol FcrSubRoomControl;
@protocol FcrGroupObserver;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrGroupControl_")
@protocol FcrGroupControl <NSObject>
- (NSArray<FcrGroupInfo *> * _Nullable)getGroupList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getGroupUserListWithGroupId:(NSString * _Nonnull)groupId SWIFT_WARN_UNUSED_RESULT;
- (void)addGroupsWithGroups:(NSArray<FcrGroupCreateConfig *> * _Nonnull)groups success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateGroupsWithGroups:(NSArray<FcrGroupUpdateOptions *> * _Nonnull)groups success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteGroupsWithGroupIds:(NSArray<NSString *> * _Nonnull)groupIds success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteAllGroupsWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList groupId:(NSString * _Nonnull)groupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList groupId:(NSString * _Nonnull)groupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)moveUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList fromGroupId:(NSString * _Nonnull)fromGroupId toGroupId:(NSString * _Nonnull)toGroupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (id <FcrSubRoomControl> _Nonnull)createSubRoomControlWithGroupId:(NSString * _Nonnull)groupId SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrGroupObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrGroupObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupCreateConfig")
@interface FcrGroupCreateConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull userList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore12FcrGroupInfo")
@interface FcrGroupInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrGroupUpdatedEvent;
@class FcrGroupRemovedEvent;
@class FcrGroupUserAddedEvent;
@class FcrGroupUserMovedEvent;
@class FcrGroupUserRemovedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore16FcrGroupObserver_")
@protocol FcrGroupObserver <NSObject>
@optional
- (void)onGroupsAddedWithEvents:(NSArray<FcrGroupAddedEvent *> * _Nonnull)events;
- (void)onGroupsUpdatedWithEvents:(NSArray<FcrGroupUpdatedEvent *> * _Nonnull)events;
- (void)onGroupsRemovedWithEvents:(NSArray<FcrGroupRemovedEvent *> * _Nonnull)events;
- (void)onUserListAddedToGroupWithEvents:(NSArray<FcrGroupUserAddedEvent *> * _Nonnull)events;
- (void)onUserListMoveToGroupWithEvents:(NSArray<FcrGroupUserMovedEvent *> * _Nonnull)events;
- (void)onUserListRemovedFromGroupWithEvents:(NSArray<FcrGroupUserRemovedEvent *> * _Nonnull)events;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupRemovedEvent")
@interface FcrGroupRemovedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore21FcrGroupUpdateOptions")
@interface FcrGroupUpdateOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupUpdatedEvent")
@interface FcrGroupUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore22FcrGroupUserAddedEvent")
@interface FcrGroupUserAddedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore22FcrGroupUserMovedEvent")
@interface FcrGroupUserMovedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull fromGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull toGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrUserLeftReason : NSInteger;

SWIFT_CLASS("_TtC7FcrCore24FcrGroupUserRemovedEvent")
@interface FcrGroupUserRemovedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) enum FcrUserLeftReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrLiveStreamingLayoutType : NSInteger;

SWIFT_CLASS("_TtC7FcrCore22FcrLiveStreamingConfig")
@interface FcrLiveStreamingConfig : NSObject
@property (nonatomic, copy) NSString * _Nonnull pushStreamingUrl;
@property (nonatomic, copy) NSString * _Nonnull pushStreamingKey;
@property (nonatomic, copy) NSString * _Nonnull pullStreamingUrl;
@property (nonatomic) enum FcrLiveStreamingLayoutType layoutType;
- (nonnull instancetype)initWithPushStreamingUrl:(NSString * _Nonnull)pushStreamingUrl pushStreamingKey:(NSString * _Nonnull)pushStreamingKey pullStreamingUrl:(NSString * _Nonnull)pullStreamingUrl layoutType:(enum FcrLiveStreamingLayoutType)layoutType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FcrLiveStreamingLayoutType, open) {
  FcrLiveStreamingLayoutTypeGallery = 1,
  FcrLiveStreamingLayoutTypeSpeaker = 2,
};

typedef SWIFT_ENUM(NSInteger, FcrLiveStreamingState, open) {
  FcrLiveStreamingStateStopped = 0,
  FcrLiveStreamingStateStarted = 1,
};

@protocol FcrPrivilegeControl;
@protocol FcrUserControl;
@protocol FcrStreamControl;
@protocol FcrRoomSessionControl;
@class FcrRoomInfo;
@class FcrRoomSchedule;
@class FcrRoomJoinOptions;
enum FcrRoomState : NSInteger;
enum FcrRecordingState : NSInteger;
@protocol FcrRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore14FcrRoomControl_")
@protocol FcrRoomControl <NSObject>
/// get user control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrPrivilegeControl
- (id <FcrPrivilegeControl> _Nullable)getPrivilegeControl SWIFT_WARN_UNUSED_RESULT;
/// get user control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrUserControl
- (id <FcrUserControl> _Nullable)getUserControl SWIFT_WARN_UNUSED_RESULT;
/// get stream control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrStreamControl
- (id <FcrStreamControl> _Nullable)getStreamControl SWIFT_WARN_UNUSED_RESULT;
/// get session control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomSessionControl
- (id <FcrRoomSessionControl> _Nullable)getRoomSessionControl SWIFT_WARN_UNUSED_RESULT;
/// get chat control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrChatRoomControl
- (id <FcrChatRoomControl> _Nullable)getChatRoomControl SWIFT_WARN_UNUSED_RESULT;
/// get board control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrBoardRoomControl
- (id <FcrBoardRoomControl> _Nullable)getBoardRoomControl SWIFT_WARN_UNUSED_RESULT;
/// get  basic info of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomInfo
- (FcrRoomInfo * _Nullable)getRoomInfo SWIFT_WARN_UNUSED_RESULT;
/// get schedule of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomSchedule
- (FcrRoomSchedule * _Nullable)getRoomSchedule SWIFT_WARN_UNUSED_RESULT;
/// Represents the time in millisecond
- (uint64_t)getSyncTimestamp SWIFT_WARN_UNUSED_RESULT;
- (void)joinWithOptions:(FcrRoomJoinOptions * _Nonnull)options success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)leave;
- (void)startWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)endWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)closeWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (enum FcrRoomState)getRoomState SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getRoomProperties SWIFT_WARN_UNUSED_RESULT;
- (enum FcrRecordingState)getCloudRecordingState SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getRoomPropertiesByKeyPathWithKeyPath:(NSString * _Nonnull)keyPath SWIFT_WARN_UNUSED_RESULT;
- (void)updateRoomPropertiesWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateIncrementRoomPropertiesWithIncrements:(NSDictionary<NSString *, NSNumber *> * _Nonnull)increments cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteRoomPropertiesWithKeyPaths:(NSArray<NSString *> * _Nonnull)keyPaths cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)startCloudRecordingWithConfig:(FcrCloudRecordingConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)pauseCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)resumeCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)stopCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (enum FcrLiveStreamingState)getLiveStreamingState SWIFT_WARN_UNUSED_RESULT;
- (FcrLiveStreamingConfig * _Nullable)getLiveStreamingConfig SWIFT_WARN_UNUSED_RESULT;
- (void)startLiveStreamingWithConfig:(FcrLiveStreamingConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)stopLiveStreamingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateLiveStreamingLayoutWithLayout:(enum FcrLiveStreamingLayoutType)layout success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)sendRoomMessageWithPayload:(NSDictionary<NSString *, id> * _Nonnull)payload guaranteedDelivery:(BOOL)guaranteedDelivery success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrRoomObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore18FcrMainRoomControl_")
@protocol FcrMainRoomControl <FcrRoomControl>
- (id <FcrGroupControl> _Nullable)getGroupControl SWIFT_WARN_UNUSED_RESULT;
@end

@class AgoraRteVideoRenderConfig;
@class AgoraRteScreenCaptureParams;
@protocol AgoraRteAudioEffectEnhancer;
@protocol AgoraRteVideoEffectEnhancer;
@protocol FcrMediaObserver;
@protocol FcrRecordAudioRawDataObserver;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrMediaControl_")
@protocol FcrMediaControl <NSObject>
- (AgoraError * _Nullable)openDeviceWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)closeDeviceWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteMediaSourceState)getDeviceStateWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceIdWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)switchCamera SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteCameraPosition)getCameraPosition SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startCameraPreviewWithConfig:(AgoraRteVideoRenderConfig * _Nonnull)config view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopCameraPreviewWithView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)updateCameraPreviewWithConfig:(AgoraRteVideoRenderConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startCameraTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopCameraTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startMicrophoneTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopMicrophoneTest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCapabilitySupportedWithCapability:(AgoraRteCapability)capability SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startScreenCaptureWithParams:(AgoraRteScreenCaptureParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopScreenCapture SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)updateScreenCaptureWithHasAudio:(BOOL)hasAudio SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteMediaSourceState)getScreenCaptureState SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)setEnableSpeakerWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteAudioOutputRouting)getAudioOutputRouting SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)adjustOutputVolumeWithVolume:(NSUInteger)volume SWIFT_WARN_UNUSED_RESULT;
- (id <AgoraRteAudioEffectEnhancer> _Nullable)getAudioEffectEnhancer SWIFT_WARN_UNUSED_RESULT;
- (id <AgoraRteVideoEffectEnhancer> _Nullable)getVideoEffectEnhancer SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrMediaObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrMediaObserver> _Nonnull)observer;
- (void)addRecordAudioRawDataObserverWithObserver:(id <FcrRecordAudioRawDataObserver> _Nonnull)observer;
- (void)removeRecordAudioRawDataObserverWithObserver:(id <FcrRecordAudioRawDataObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore16FcrMediaObserver_")
@protocol FcrMediaObserver <NSObject>
@optional
- (void)onCameraStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onMicrophoneStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onScreenCaptureStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onSpeakerStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onMicrophoneVolumeIndicationUpdatedWithVolume:(uint8_t)volume;
- (void)onOutputVolumeIndicationUpdatedWithVolume:(uint8_t)volume;
- (void)onAudioOutputRoutingUpdatedWithRouting:(AgoraRteAudioOutputRouting)routing;
@end


SWIFT_CLASS("_TtC7FcrCore10FcrMessage")
@interface FcrMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull senderId;
@property (nonatomic, readonly) uint64_t timestamp;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FcrMonitorObserver;

SWIFT_PROTOCOL("_TtP7FcrCore17FcrMonitorControl_")
@protocol FcrMonitorControl
- (void)uploadLogWithSuccess:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrMonitorObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrMonitorObserver> _Nonnull)observer;
@end

@class AgoraRtePerformanceInfo;

SWIFT_PROTOCOL("_TtP7FcrCore18FcrMonitorObserver_")
@protocol FcrMonitorObserver <NSObject>
@optional
- (void)onPerformanceUpdatedWithInfo:(AgoraRtePerformanceInfo * _Nonnull)info;
@end


SWIFT_CLASS("_TtC7FcrCore10FcrSession")
@interface FcrSession : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
/// timestamp: start time, represents the time in millisecond
@property (nonatomic, readonly) uint64_t timestamp;
/// timestamp: start time, represents the time in millisecond
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull senderId;
/// interval: Represents the time in millisecond
@property (nonatomic, readonly) uint32_t interval;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore14FcrPeerSession")
@interface FcrPeerSession : FcrSession
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
@end

@class FcrPeerSessionParams;
@protocol FcrPeerSessionObserver;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrPeerSessionControl_")
@protocol FcrPeerSessionControl <NSObject>
- (void)startPeerSessionWithParams:(FcrPeerSessionParams * _Nonnull)params success:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)stopPeerSessionWithSessionId:(NSString * _Nonnull)sessionId;
- (void)acceptPeerSessionWithSession:(FcrPeerSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)rejectPeerSessionWithSession:(FcrPeerSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrPeerSessionObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrPeerSessionObserver> _Nonnull)observer;
@end

@class FcrSessionResponse;

SWIFT_PROTOCOL("_TtP7FcrCore22FcrPeerSessionObserver_")
@protocol FcrPeerSessionObserver <NSObject>
@optional
- (void)onPeerSessionReceivedWithSession:(FcrPeerSession * _Nonnull)session;
- (void)onPeerSessionAcceptedWithResponse:(FcrSessionResponse * _Nonnull)response;
- (void)onPeerSessionRejectedWithResponse:(FcrSessionResponse * _Nonnull)response;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrPeerSessionParams")
@interface FcrPeerSessionParams : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull receiverId;
/// duration: Represents the time in second
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionKey:(NSString * _Nonnull)sessionKey duration:(uint32_t)duration receiverId:(NSString * _Nonnull)receiverId payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrPermissionAction : NSInteger;
@class FcrTargetRoleType;

SWIFT_CLASS("_TtC7FcrCore13FcrPermission")
@interface FcrPermission : NSObject
@property (nonatomic, readonly) enum FcrPermissionAction action;
@property (nonatomic, readonly) id _Nonnull params;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrPermissionAction, open) {
  FcrPermissionActionRoomStart = 0,
  FcrPermissionActionRoomEnd = 1,
  FcrPermissionActionRoomSetPassword = 2,
  FcrPermissionActionRoomJoin = 3,
  FcrPermissionActionRoomLeave = 4,
  FcrPermissionActionRoomLock = 5,
  FcrPermissionActionRoomUnlock = 6,
  FcrPermissionActionUserSetRole = 7,
  FcrPermissionActionUserKickOut = 8,
  FcrPermissionActionUserBlock = 9,
  FcrPermissionActionUserChangeName = 10,
  FcrPermissionActionUserAllowChangeName = 11,
  FcrPermissionActionUserDisallowChangeName = 12,
  FcrPermissionActionUserRevokeRole = 13,
  FcrPermissionActionStreamMuteAudio = 14,
  FcrPermissionActionStreamStartAudio = 15,
  FcrPermissionActionStreamRequestStartAudio = 16,
  FcrPermissionActionStreamAllowStartAudio = 17,
  FcrPermissionActionStreamDisallowStartAudio = 18,
  FcrPermissionActionStreamStopVideo = 19,
  FcrPermissionActionStreamStartVideo = 20,
  FcrPermissionActionStreamRequestStartVideo = 21,
  FcrPermissionActionStreamAllowStartVideo = 22,
  FcrPermissionActionStreamDisallowStartVideo = 23,
  FcrPermissionActionStreamStartScreenSharing = 24,
  FcrPermissionActionStreamStopScreenSharing = 25,
  FcrPermissionActionStreamAllowStartScreenSharing = 26,
  FcrPermissionActionStreamDisallowStartScreenSharing = 27,
  FcrPermissionActionStreamBatchMuteAudio = 28,
  FcrPermissionActionStreamBatchRequestStartAudio = 29,
  FcrPermissionActionStreamDisallowJoinWithMuteAudio = 30,
  FcrPermissionActionStreamAllowJoinWithMuteAudio = 31,
  FcrPermissionActionWaitingRoomEnable = 32,
  FcrPermissionActionWaitingRoomDisable = 33,
  FcrPermissionActionWaitingRoomAddUser = 34,
  FcrPermissionActionWaitingRoomRemoveUser = 35,
  FcrPermissionActionChatSendPublic = 36,
  FcrPermissionActionChatSendPrivate = 37,
  FcrPermissionActionChatAllowSendAll = 38,
  FcrPermissionActionChatDisallowSendAll = 39,
  FcrPermissionActionChatAllowSendPrivate = 40,
  FcrPermissionActionChatDisallowSendPrivate = 41,
  FcrPermissionActionStartCloudRecording = 42,
  FcrPermissionActionPauseCloudRecording = 43,
  FcrPermissionActionResumeCloudRecording = 44,
  FcrPermissionActionStopCloudRecording = 45,
  FcrPermissionActionBoardStart = 46,
  FcrPermissionActionBoardClose = 47,
  FcrPermissionActionBoardWrite = 48,
  FcrPermissionActionBoardAllowStart = 49,
  FcrPermissionActionBoardDisallowStart = 50,
  FcrPermissionActionBoardAllowWrite = 51,
  FcrPermissionActionBoardDisallowWrite = 52,
};


SWIFT_CLASS("_TtC7FcrCore17FcrPermissionInfo")
@interface FcrPermissionInfo : NSObject
@property (nonatomic, readonly) BOOL enable;
@property (nonatomic, readonly, strong) FcrPermission * _Nullable info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore27FcrPermissionInfoAddedEvent")
@interface FcrPermissionInfoAddedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<FcrPermissionInfo *> * _Nonnull permissionInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrPermissionInfoDeletedEvent")
@interface FcrPermissionInfoDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<FcrPermissionInfo *> * _Nonnull permissionInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FcrPrivilegeObserver;
enum FcrSecurityAction : NSInteger;
@class FcrSecurityInfo;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrPrivilegeControl_")
@protocol FcrPrivilegeControl <NSObject>
- (void)addObserverWithObserver:(id <FcrPrivilegeObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrPrivilegeObserver> _Nonnull)observer;
- (FcrSecurityInfo * _Nullable)getSecurityInfoWithAction:(enum FcrSecurityAction)action SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrSecurityInfo *> * _Nullable)getAllSecurityInfo SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrPermissionInfo *> * _Nullable)getAllLocalUserPermissionInfo SWIFT_WARN_UNUSED_RESULT;
- (FcrPermissionInfo * _Nullable)getLocalUserPermissionInfoWithAction:(enum FcrPermissionAction)action SWIFT_WARN_UNUSED_RESULT;
- (void)enableLockedRoomWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareScreenWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareBoardWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowWriteBoardWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowSendChatWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles payload:(NSDictionary<NSString *, id> * _Nonnull)payload success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowStartAudioWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowStartVideoWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowJoinWithMuteAudioWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
@end

@class FcrSecurityInfoUpdatedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore20FcrPrivilegeObserver_")
@protocol FcrPrivilegeObserver <NSObject>
@optional
- (void)onSecurityInfoUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrSecurityInfoUpdatedEvent * _Nonnull)event;
- (void)onLocalUserPermissionAddedWithRoomId:(NSString * _Nonnull)roomId event:(FcrPermissionInfoAddedEvent * _Nonnull)event;
- (void)onLocalUserPermissionDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrPermissionInfoDeletedEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL("_TtP7FcrCore29FcrRecordAudioRawDataObserver_")
@protocol FcrRecordAudioRawDataObserver <NSObject>
- (void)onAudioRawDataRecordedWithData:(AgoraRteAudioRawData * _Nonnull)data;
@end

typedef SWIFT_ENUM(NSInteger, FcrRecordingState, open) {
  FcrRecordingStateStarting = 1,
  FcrRecordingStateStarted = 2,
  FcrRecordingStatePaused = 3,
  FcrRecordingStateStopped = 4,
};



SWIFT_CLASS("_TtC7FcrCore11FcrRoomInfo")
@interface FcrRoomInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrUserRole : NSInteger;
@class AgoraRteStreamJoinConfig;

SWIFT_CLASS("_TtC7FcrCore18FcrRoomJoinOptions")
@interface FcrRoomJoinOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly) enum FcrUserRole userRole;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userProperties;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomToken;
@property (nonatomic, readonly) AgoraRteStreamLatencyLevel streamLatency;
@property (nonatomic, copy) NSArray<AgoraRteStreamJoinConfig *> * _Nullable createStreamConfigs;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userRole:(enum FcrUserRole)userRole userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties roomToken:(NSString * _Nonnull)roomToken streamLatency:(AgoraRteStreamLatencyLevel)streamLatency createStreamConfigs:(NSArray<AgoraRteStreamJoinConfig *> * _Nullable)createStreamConfigs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrRoomPropertiesUpdatedEvent;
@class FcrRoomPropertiesDeletedEvent;
@class AgoraRteNetworkQualityEvent;
@class AgoraRteNetworkStats;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrRoomObserver_")
@protocol FcrRoomObserver <NSObject>
@optional
- (void)onJoinRoomSuccessWithRoomId:(NSString * _Nonnull)roomId;
- (void)onJoinRoomFailureWithRoomId:(NSString * _Nonnull)roomId error:(AgoraError * _Nonnull)error;
- (void)onRoomMessageReceivedWithRoomId:(NSString * _Nonnull)roomId message:(FcrMessage * _Nonnull)message;
- (void)onRoomStateUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrRoomState)state;
- (void)onCloudRecordingStateUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrRecordingState)state;
- (void)onRoomPropertiesUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrRoomPropertiesUpdatedEvent * _Nonnull)event;
- (void)onRoomPropertiesDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrRoomPropertiesDeletedEvent * _Nonnull)event;
- (void)onNetworkQualityUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(AgoraRteNetworkQualityEvent * _Nonnull)event;
- (void)onNetworkStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId stats:(AgoraRteNetworkStats * _Nonnull)stats;
- (void)onLiveStreamingUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrLiveStreamingState)state;
@end


SWIFT_CLASS("_TtC7FcrCore29FcrRoomPropertiesDeletedEvent")
@interface FcrRoomPropertiesDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull changedKeyPaths;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrRoomPropertiesUpdatedEvent")
@interface FcrRoomPropertiesUpdatedEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull changedProperties;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore15FcrRoomSchedule")
@interface FcrRoomSchedule : NSObject
/// Represents the time in second
@property (nonatomic, readonly) uint64_t startTime;
/// Represents the time in second
/// If the value is 0, it means there is no time limit for the room
@property (nonatomic, readonly) uint64_t duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore14FcrRoomSession")
@interface FcrRoomSession : FcrSession
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
@end

@class FcrRoomSessionParams;
@protocol FcrRoomSessionObserver;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrRoomSessionControl_")
@protocol FcrRoomSessionControl <NSObject>
- (void)startRoomSessionWithParams:(FcrRoomSessionParams * _Nonnull)params success:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)stopRoomSessionWithSessionId:(NSString * _Nonnull)sessionId;
- (void)acceptRoomSessionWithSession:(FcrRoomSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)rejectRoomSessionWithSession:(FcrRoomSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrRoomSessionObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrRoomSessionObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore22FcrRoomSessionObserver_")
@protocol FcrRoomSessionObserver <NSObject>
@optional
- (void)onRoomSessionReceivedWithSession:(FcrRoomSession * _Nonnull)session;
- (void)onRoomSessionAcceptedWithResponse:(FcrSessionResponse * _Nonnull)response;
- (void)onRoomSessionRejectedWithResponse:(FcrSessionResponse * _Nonnull)response;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrRoomSessionParams")
@interface FcrRoomSessionParams : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionKey:(NSString * _Nonnull)sessionKey duration:(uint32_t)duration payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrRoomState, open) {
  FcrRoomStateInitialized = 0,
  FcrRoomStateStarted = 1,
  FcrRoomStateEnded = 2,
  FcrRoomStateClosed = 3,
};


SWIFT_CLASS("_TtC7FcrCore27FcrScreenStreamCreateConfig")
@interface FcrScreenStreamCreateConfig : NSObject
@property (nonatomic, readonly) AgoraRteStreamType streamType;
- (nonnull instancetype)initWithStreamType:(AgoraRteStreamType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore11FcrSecurity")
@interface FcrSecurity : NSObject
@property (nonatomic, readonly) enum FcrSecurityAction action;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoles;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrSecurityAction, open) {
  FcrSecurityActionPassword = 0,
  FcrSecurityActionLockedRoom = 1,
  FcrSecurityActionWaitingRoom = 2,
  FcrSecurityActionShareScreen = 3,
  FcrSecurityActionChangeName = 4,
  FcrSecurityActionStartAudio = 5,
  FcrSecurityActionStartVideo = 6,
  FcrSecurityActionJoinWithMuteAudio = 7,
  FcrSecurityActionSendChat = 8,
  FcrSecurityActionShareBoard = 9,
  FcrSecurityActionSharing = 10,
};


SWIFT_CLASS("_TtC7FcrCore15FcrSecurityInfo")
@interface FcrSecurityInfo : NSObject
@property (nonatomic, readonly) BOOL enable;
@property (nonatomic, readonly, strong) FcrSecurity * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore27FcrSecurityInfoUpdatedEvent")
@interface FcrSecurityInfoUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrSecurityInfo * _Nonnull securityInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC7FcrCore18FcrSessionResponse")
@interface FcrSessionResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull responderId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull payload;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrStreamInfo;
@class AgoraRteStreamCreateConfig;
@class AgoraRteUpdateStreamPrivilege;
@class FcrUpdateStreamPrivilegeScope;
@class AgoraRteSnapshotInfo;
@protocol FcrStreamObserver;

SWIFT_PROTOCOL("_TtP7FcrCore16FcrStreamControl_")
@protocol FcrStreamControl <NSObject>
- (NSDictionary<NSString *, NSArray<FcrStreamInfo *> *> * _Nullable)getStreams SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrStreamInfo *> * _Nullable)getStreamList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrStreamInfo *> * _Nullable)getStreamsByUserIdWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (FcrStreamInfo * _Nullable)getStreamByStreamIdWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalStreamsWithConfigs:(NSArray<AgoraRteStreamCreateConfig *> * _Nonnull)configs success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updatePublishPrivilegeOfStreamsWithPrivileges:(NSDictionary<NSString *, AgoraRteUpdateStreamPrivilege *> * _Nonnull)privileges success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updatePublishPrivilegeOfStreamsWithPrivilege:(AgoraRteUpdateStreamPrivilege * _Nonnull)privilege scope:(FcrUpdateStreamPrivilegeScope * _Nonnull)scope success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeStreamsWithStreams:(NSArray<NSString *> * _Nonnull)streams success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)setVideoEncoderConfigWithStreamId:(NSString * _Nonnull)streamId config:(AgoraRteVideoEncoderConfig * _Nonnull)config streamType:(AgoraRteVideoStreamType)streamType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startRenderRemoteVideoStreamWithStreamId:(NSString * _Nonnull)streamId config:(AgoraRteVideoRenderConfig * _Nonnull)config type:(AgoraRteVideoStreamType)type view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopRenderRemoteVideoStreamWithStreamId:(NSString * _Nonnull)streamId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startPlayRemoteAudioStreamWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopPlayRemoteAudioStreamWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (void)takeSnapshotWithStreamId:(NSString * _Nonnull)streamId filePath:(NSString * _Nonnull)filePath success:(void (^ _Nullable)(AgoraRteSnapshotInfo * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addLocalScreenStreamWithConfig:(FcrScreenStreamCreateConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeScreenStreamWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrStreamObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrStreamObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore14FcrStreamEvent")
@interface FcrStreamEvent : NSObject
@property (nonatomic, readonly, strong) FcrStreamInfo * _Nonnull modifiedStream;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore13FcrStreamInfo")
@interface FcrStreamInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull streamId;
@property (nonatomic, readonly, copy) NSString * _Nullable streamName;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull owner;
@property (nonatomic, readonly) AgoraRteStreamType streamType;
@property (nonatomic, readonly) AgoraRteVideoSourceType videoSourceType;
@property (nonatomic, readonly) AgoraRteAudioSourceType audioSourceType;
@property (nonatomic, readonly) AgoraRteMediaSourceState videoSourceState;
@property (nonatomic, readonly) AgoraRteMediaSourceState audioSourceState;
@property (nonatomic, readonly, copy) NSString * _Nullable videoSourceId;
@property (nonatomic, readonly, copy) NSString * _Nullable audioSourceId;
@property (nonatomic, readonly) AgoraRteRoomConnectorType connectorType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AgoraRteLocalVideoStats;
@class AgoraRteLocalAudioStats;
@class AgoraRteRemoteVideoStats;
@class AgoraRteRemoteAudioStats;

SWIFT_PROTOCOL("_TtP7FcrCore17FcrStreamObserver_")
@protocol FcrStreamObserver <NSObject>
@optional
- (void)onStreamsAddedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamsRemovedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamsUpdatedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamVolumeIndicationUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId volume:(uint8_t)volume;
- (void)onLocalStreamVideoStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteLocalVideoStats * _Nonnull)stats;
- (void)onLocalStreamAudioStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteLocalAudioStats * _Nonnull)stats;
- (void)onRemoteStreamVideoStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteRemoteVideoStats * _Nonnull)stats;
- (void)onRemoteStreamAudioStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteRemoteAudioStats * _Nonnull)stats;
- (void)onFirstRemoteVideoFrameRenderedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId dimensions:(CGSize)dimensions;
@end


SWIFT_PROTOCOL("_TtP7FcrCore17FcrSubRoomControl_")
@protocol FcrSubRoomControl <FcrRoomControl>
@end


SWIFT_CLASS("_TtC7FcrCore17FcrTargetRoleType")
@interface FcrTargetRoleType : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUpdateStreamPrivilegeScope")
@interface FcrUpdateStreamPrivilegeScope : NSObject
@property (nonatomic, readonly) AgoraRteStreamPrivilegeVideoSourceType videoSourceType;
@property (nonatomic, readonly) AgoraRteStreamPrivilegeAudioSourceType audioSourceType;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoleType;
@property (nonatomic, readonly) BOOL targetRoleIsInclude;
- (nonnull instancetype)initWithVideoSourceType:(AgoraRteStreamPrivilegeVideoSourceType)videoSourceType audioSourceType:(AgoraRteStreamPrivilegeAudioSourceType)audioSourceType targetRoleType:(FcrTargetRoleType * _Nonnull)targetRoleType targetRoleIsInclude:(BOOL)targetRoleIsInclude OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AgoraRteUserPageParams;
enum FcrUserKickedOutType : NSInteger;
@protocol FcrUserObserver;

SWIFT_PROTOCOL("_TtP7FcrCore14FcrUserControl_")
@protocol FcrUserControl <NSObject>
- (FcrUserInfo * _Nonnull)getLocalUser SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, FcrUserInfo *> * _Nonnull)getUsers SWIFT_WARN_UNUSED_RESULT;
- (FcrUserInfo * _Nullable)getUserWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrUserInfo *> * _Nonnull)getUserList SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getAllUserCount SWIFT_WARN_UNUSED_RESULT;
- (void)fetchUserListWithParams:(AgoraRteUserPageParams * _Nonnull)params success:(AgoraRteUserPageCompletion _Nonnull)success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateUserPropertiesWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateIncrementUserPropertiesWithIncrements:(NSDictionary<NSString *, NSNumber *> * _Nonnull)increments cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteUserPropertiesWithKeyPaths:(NSArray<NSString *> * _Nonnull)keyPaths cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (NSDictionary<NSString *, id> * _Nullable)getUserProperties SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getUserPropertiesByUserIdWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getUserPropertiesByKeyPathWithKeyPath:(NSString * _Nonnull)keyPath userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)kickOutWithUserId:(NSString * _Nonnull)userId type:(enum FcrUserKickedOutType)type success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateRemoteUserWithUserId:(NSString * _Nonnull)userId userRole:(enum FcrUserRole)userRole success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)revokeHostWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrUserObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrUserObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore11FcrUserInfo")
@interface FcrUserInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly) enum FcrUserRole userRole;
@property (nonatomic, readonly) AgoraRteRoomConnectorType connectorType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore18FcrUserJoinedEvent")
@interface FcrUserJoinedEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore21FcrUserKickedOutEvent")
@interface FcrUserKickedOutEvent : NSObject
@property (nonatomic, readonly) enum FcrUserKickedOutType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserKickedOutType, open) {
  FcrUserKickedOutTypeOnce = 1,
  FcrUserKickedOutTypeForever = 2,
};


SWIFT_CLASS("_TtC7FcrCore16FcrUserLeftEvent")
@interface FcrUserLeftEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly) enum FcrUserLeftReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserLeftReason, open) {
  FcrUserLeftReasonLeaveRoom = 1,
  FcrUserLeftReasonKickOut = 2,
};

@class FcrUserUpdatedEvent;
@class FcrUserPropertiesUpdatedEvent;
@class FcrUserPropertiesDeletedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrUserObserver_")
@protocol FcrUserObserver <NSObject>
@optional
- (void)onRemoteUsersJoinedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrUserJoinedEvent *> * _Nonnull)events;
- (void)onRemoteUsersLeftWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrUserLeftEvent *> * _Nonnull)events;
- (void)onUserUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserUpdatedEvent * _Nonnull)event;
- (void)onAllUserCountUpdatedWithRoomId:(NSString * _Nonnull)roomId count:(uint32_t)count;
- (void)onUserPropertiesUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserPropertiesUpdatedEvent * _Nonnull)event;
- (void)onUserPropertiesDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserPropertiesDeletedEvent * _Nonnull)event;
- (void)onLocalUserKickedOutWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserKickedOutEvent * _Nonnull)event;
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUserPropertiesDeletedEvent")
@interface FcrUserPropertiesDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull changedKeyPaths;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUserPropertiesUpdatedEvent")
@interface FcrUserPropertiesUpdatedEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull changedProperties;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserRole, open) {
  FcrUserRoleHost = 1,
  FcrUserRoleCohost = 2,
  FcrUserRoleParticipant = 3,
};


SWIFT_CLASS("_TtC7FcrCore19FcrUserUpdatedEvent")
@interface FcrUserUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly) AgoraRteUserUpdatedReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef FCRCORE_SWIFT_H
#define FCRCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AgoraRte;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FcrCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class NSString;
@class AgoraRteAudioRawData;

SWIFT_PROTOCOL("_TtP7FcrCore29FcrAudioRawOutputDataObserver_")
@protocol FcrAudioRawOutputDataObserver <NSObject>
@optional
- (void)onAudioRawDataBeforeMixedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId data:(AgoraRteAudioRawData * _Nonnull)data;
- (void)onAudioRawDataMixedWithRoomId:(NSString * _Nonnull)roomId data:(AgoraRteAudioRawData * _Nonnull)data;
@end

typedef SWIFT_ENUM(NSInteger, FcrBoardInactiveReason, open) {
  FcrBoardInactiveReasonClose = 1,
  FcrBoardInactiveReasonTimeout = 2,
  FcrBoardInactiveReasonSeize = 3,
  FcrBoardInactiveReasonPermissionReclaimed = 4,
};

@class AgoraError;
@protocol FcrBoardRoomMainWindow;
@class UIColor;
@class UIView;
@protocol FcrBoardRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrBoardRoomControl_")
@protocol FcrBoardRoomControl <NSObject>
- (void)activeWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)inactiveWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)openWithSuccess:(void (^ _Nullable)(id <FcrBoardRoomMainWindow> _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)close;
- (void)setBackgroundColor:(UIColor * _Nonnull)color hexString:(NSString * _Nullable)hexString success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (BOOL)getActivity SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getOwnerId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteConnectionState)getConnectionState SWIFT_WARN_UNUSED_RESULT;
- (id <FcrBoardRoomMainWindow> _Nullable)getMainWindow SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)getContentView SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrBoardRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrBoardRoomObserver> _Nonnull)observer;
@end

enum FcrBoardToolType : NSInteger;
@class UIImage;

SWIFT_PROTOCOL("_TtP7FcrCore22FcrBoardRoomMainWindow_")
@protocol FcrBoardRoomMainWindow <NSObject>
- (void)undo;
- (void)redo;
- (void)clean;
- (void)setToolTypeWithToolType:(enum FcrBoardToolType)toolType;
- (void)setStrokeWidthWithStrokeWidth:(CGFloat)strokeWidth;
- (void)setStrokeColorWithStrokeColor:(UIColor * _Nonnull)strokeColor;
- (void)setTextColorWithTextColor:(UIColor * _Nonnull)textColor;
- (void)setTextSizeWithTextSize:(CGFloat)textSize;
- (void)setBackgroundColorWithBackgroudColor:(UIColor * _Nonnull)backgroudColor;
- (void)getSnapshotImageWithSuccess:(void (^ _Nullable)(UIImage * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
@end

@class FcrUserInfo;

SWIFT_PROTOCOL("_TtP7FcrCore20FcrBoardRoomObserver_")
@protocol FcrBoardRoomObserver <NSObject>
@optional
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
- (void)onUndoStateUpdatedWithEnable:(BOOL)enable;
- (void)onRedoStateUpdatedWithEnable:(BOOL)enable;
- (void)onActiveWithOwnerId:(NSString * _Nonnull)ownerId operatorUser:(FcrUserInfo * _Nullable)operatorUser;
- (void)onInactiveWithReason:(enum FcrBoardInactiveReason)reason operatorUser:(FcrUserInfo * _Nullable)operatorUser;
- (void)onBackgroundColorUpdatedWithColor:(NSString * _Nonnull)color operatorUser:(FcrUserInfo * _Nullable)operatorUser;
@end

typedef SWIFT_ENUM(NSInteger, FcrBoardToolType, open) {
  FcrBoardToolTypeNone = 0,
  FcrBoardToolTypeSelector = 1,
  FcrBoardToolTypeLaserPointer = 2,
  FcrBoardToolTypeEraser = 3,
  FcrBoardToolTypeText = 4,
  FcrBoardToolTypeCurve = 5,
  FcrBoardToolTypeStraight = 6,
  FcrBoardToolTypeArrow = 7,
  FcrBoardToolTypeRectangle = 8,
  FcrBoardToolTypeTriangle = 9,
  FcrBoardToolTypeRhombu = 10,
  FcrBoardToolTypePentagra = 11,
  FcrBoardToolTypeEllips = 12,
};

@class FcrChatRoomSendBaseMessage;
@class FcrChatRoomReceivedBaseMessage;
@protocol FcrChatRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore18FcrChatRoomControl_")
@protocol FcrChatRoomControl <NSObject>
- (AgoraRteConnectionState)getConnectionState SWIFT_WARN_UNUSED_RESULT;
- (void)sendMessageWithMessage:(FcrChatRoomSendBaseMessage * _Nonnull)message success:(void (^ _Nullable)(FcrChatRoomReceivedBaseMessage * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrChatRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrChatRoomObserver> _Nonnull)observer;
@end

typedef SWIFT_ENUM(NSInteger, FcrChatRoomMessageType, open) {
  FcrChatRoomMessageTypeText = 0,
  FcrChatRoomMessageTypeImage = 1,
  FcrChatRoomMessageTypeCustom = 2,
};

@class FcrChatRoomReceivedTextMessage;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrChatRoomObserver_")
@protocol FcrChatRoomObserver <NSObject>
@optional
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
- (void)onTextMessageReceivedWithMessage:(FcrChatRoomReceivedTextMessage * _Nonnull)message;
@end


SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceivedBaseMessage")
@interface FcrChatRoomReceivedBaseMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull from;
@property (nonatomic, readonly) enum FcrChatRoomMessageType type;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable properties;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable to;
@property (nonatomic) NSUInteger timestamp;
@property (nonatomic) BOOL isPrivate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceiveImageMessage")
@interface FcrChatRoomReceiveImageMessage : FcrChatRoomReceivedBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly) NSUInteger width;
@property (nonatomic, readonly) NSUInteger height;
@end



SWIFT_CLASS("_TtC7FcrCore30FcrChatRoomReceivedTextMessage")
@interface FcrChatRoomReceivedTextMessage : FcrChatRoomReceivedBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrChatRoomSendBaseMessage")
@interface FcrChatRoomSendBaseMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore28FcrChatRoomSendCustomMessage")
@interface FcrChatRoomSendCustomMessage : FcrChatRoomSendBaseMessage
@end

@class NSData;

SWIFT_CLASS("_TtC7FcrCore27FcrChatRoomSendImageMessage")
@interface FcrChatRoomSendImageMessage : FcrChatRoomSendBaseMessage
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSUInteger width;
@property (nonatomic, readonly) NSUInteger height;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrChatRoomSendTextMessage")
@interface FcrChatRoomSendTextMessage : FcrChatRoomSendBaseMessage
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
- (nonnull instancetype)initWithContent:(NSString * _Nonnull)content properties:(NSDictionary<NSString *, id> * _Nullable)properties to:(NSArray<NSString *> * _Nullable)to OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, FcrCloudRecordingAudioProfile, open) {
  FcrCloudRecordingAudioProfileMusicMono48K = 0,
  FcrCloudRecordingAudioProfileMusicMono128K = 1,
  FcrCloudRecordingAudioProfileMusicStereo192K = 2,
};

@class AgoraRteVideoEncoderConfig;

SWIFT_CLASS("_TtC7FcrCore23FcrCloudRecordingConfig")
@interface FcrCloudRecordingConfig : NSObject
@property (nonatomic, readonly, strong) AgoraRteVideoEncoderConfig * _Nonnull videoEncoderConfig;
@property (nonatomic, readonly) enum FcrCloudRecordingAudioProfile audioProfile;
- (nonnull instancetype)initWithVideoEncoderConfig:(AgoraRteVideoEncoderConfig * _Nonnull)videoEncoderConfig audioProfile:(enum FcrCloudRecordingAudioProfile)audioProfile OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FcrCreateRoomControlConfig;
@protocol FcrMainRoomControl;
@protocol FcrMediaControl;
@protocol FcrMonitorControl;
@protocol FcrPeerSessionControl;
@protocol FcrCoreEngineObserver;

SWIFT_CLASS("_TtC7FcrCore13FcrCoreEngine")
@interface FcrCoreEngine : NSObject
- (void)loginWithUserToken:(NSString * _Nonnull)userToken success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)logout;
- (id <FcrMainRoomControl> _Nullable)createRoomControlWithConfig:(FcrCreateRoomControlConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (id <FcrMediaControl> _Nonnull)getMediaControl SWIFT_WARN_UNUSED_RESULT;
- (id <FcrMonitorControl> _Nonnull)getMonitorControl SWIFT_WARN_UNUSED_RESULT;
- (void)sendPeerMessageWithPayload:(NSDictionary<NSString *, id> * _Nonnull)payload guaranteedDelivery:(BOOL)guaranteedDelivery receiverId:(NSString * _Nonnull)receiverId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (id <FcrPeerSessionControl> _Nullable)getPeerSessionControl SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrCoreEngineObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrCoreEngineObserver> _Nonnull)observer;
- (void)setParametersWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AgoraRteMessage;

@interface FcrCoreEngine (SWIFT_EXTENSION(FcrCore)) <AgoraRteEngineDelegate>
- (void)onPeerMessageReceived:(AgoraRteMessage * _Nonnull)message;
- (void)onConnectionStateUpdated:(AgoraRteConnectionState)state;
@end


@class AgoraRteDualVideoStreamConfig;

SWIFT_CLASS("_TtC7FcrCore19FcrCoreEngineConfig")
@interface FcrCoreEngineConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly) AgoraRteRegion region;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable userProperties;
@property (nonatomic, readonly, strong) AgoraRteDualVideoStreamConfig * _Nonnull dualCameraVideoStreamConfig;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable parameters;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId token:(NSString * _Nonnull)token region:(AgoraRteRegion)region userId:(NSString * _Nonnull)userId userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties dualCameraVideoStreamConfig:(AgoraRteDualVideoStreamConfig * _Nonnull)dualCameraVideoStreamConfig parameters:(NSDictionary<NSString *, id> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId token:(NSString * _Nonnull)token region:(AgoraRteRegion)region userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FcrMessage;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrCoreEngineObserver_")
@protocol FcrCoreEngineObserver <NSObject>
@optional
- (void)onPeerMessageReceivedWithMessage:(FcrMessage * _Nonnull)message;
- (void)onConnectionStateUpdatedWithState:(AgoraRteConnectionState)state;
@end


SWIFT_CLASS("_TtC7FcrCore26FcrCreateRoomControlConfig")
@interface FcrCreateRoomControlConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
- (nonnull instancetype)initWithRoomId:(NSString * _Nonnull)roomId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FcrDeviceType, open) {
  FcrDeviceTypeCamera = 1,
  FcrDeviceTypeMicrophone = 2,
  FcrDeviceTypeSpeaker = 3,
};

@class FcrGroupInfo;

SWIFT_CLASS("_TtC7FcrCore18FcrGroupAddedEvent")
@interface FcrGroupAddedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrGroupCreateConfig;
@class FcrGroupUpdateOptions;
@protocol FcrSubRoomControl;
@protocol FcrGroupObserver;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrGroupControl_")
@protocol FcrGroupControl <NSObject>
- (NSArray<FcrGroupInfo *> * _Nullable)getGroupList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getGroupUserListWithGroupId:(NSString * _Nonnull)groupId SWIFT_WARN_UNUSED_RESULT;
- (void)addGroupsWithGroups:(NSArray<FcrGroupCreateConfig *> * _Nonnull)groups success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateGroupsWithGroups:(NSArray<FcrGroupUpdateOptions *> * _Nonnull)groups success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteGroupsWithGroupIds:(NSArray<NSString *> * _Nonnull)groupIds success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteAllGroupsWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList groupId:(NSString * _Nonnull)groupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList groupId:(NSString * _Nonnull)groupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)moveUsersWithUserList:(NSArray<NSString *> * _Nonnull)userList fromGroupId:(NSString * _Nonnull)fromGroupId toGroupId:(NSString * _Nonnull)toGroupId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (id <FcrSubRoomControl> _Nonnull)createSubRoomControlWithGroupId:(NSString * _Nonnull)groupId SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrGroupObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrGroupObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupCreateConfig")
@interface FcrGroupCreateConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull userList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore12FcrGroupInfo")
@interface FcrGroupInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrGroupUpdatedEvent;
@class FcrGroupRemovedEvent;
@class FcrGroupUserAddedEvent;
@class FcrGroupUserMovedEvent;
@class FcrGroupUserRemovedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore16FcrGroupObserver_")
@protocol FcrGroupObserver <NSObject>
@optional
- (void)onGroupsAddedWithEvents:(NSArray<FcrGroupAddedEvent *> * _Nonnull)events;
- (void)onGroupsUpdatedWithEvents:(NSArray<FcrGroupUpdatedEvent *> * _Nonnull)events;
- (void)onGroupsRemovedWithEvents:(NSArray<FcrGroupRemovedEvent *> * _Nonnull)events;
- (void)onUserListAddedToGroupWithEvents:(NSArray<FcrGroupUserAddedEvent *> * _Nonnull)events;
- (void)onUserListMoveToGroupWithEvents:(NSArray<FcrGroupUserMovedEvent *> * _Nonnull)events;
- (void)onUserListRemovedFromGroupWithEvents:(NSArray<FcrGroupUserRemovedEvent *> * _Nonnull)events;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupRemovedEvent")
@interface FcrGroupRemovedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore21FcrGroupUpdateOptions")
@interface FcrGroupUpdateOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore20FcrGroupUpdatedEvent")
@interface FcrGroupUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrGroupInfo * _Nonnull groupInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore22FcrGroupUserAddedEvent")
@interface FcrGroupUserAddedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore22FcrGroupUserMovedEvent")
@interface FcrGroupUserMovedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull fromGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull toGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrUserLeftReason : NSInteger;

SWIFT_CLASS("_TtC7FcrCore24FcrGroupUserRemovedEvent")
@interface FcrGroupUserRemovedEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) enum FcrUserLeftReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrLiveStreamingLayoutType : NSInteger;

SWIFT_CLASS("_TtC7FcrCore22FcrLiveStreamingConfig")
@interface FcrLiveStreamingConfig : NSObject
@property (nonatomic, copy) NSString * _Nonnull pushStreamingUrl;
@property (nonatomic, copy) NSString * _Nonnull pushStreamingKey;
@property (nonatomic, copy) NSString * _Nonnull pullStreamingUrl;
@property (nonatomic) enum FcrLiveStreamingLayoutType layoutType;
- (nonnull instancetype)initWithPushStreamingUrl:(NSString * _Nonnull)pushStreamingUrl pushStreamingKey:(NSString * _Nonnull)pushStreamingKey pullStreamingUrl:(NSString * _Nonnull)pullStreamingUrl layoutType:(enum FcrLiveStreamingLayoutType)layoutType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FcrLiveStreamingLayoutType, open) {
  FcrLiveStreamingLayoutTypeGallery = 1,
  FcrLiveStreamingLayoutTypeSpeaker = 2,
};

typedef SWIFT_ENUM(NSInteger, FcrLiveStreamingState, open) {
  FcrLiveStreamingStateStopped = 0,
  FcrLiveStreamingStateStarted = 1,
};

@protocol FcrPrivilegeControl;
@protocol FcrUserControl;
@protocol FcrStreamControl;
@protocol FcrRoomSessionControl;
@class FcrRoomInfo;
@class FcrRoomSchedule;
@class FcrRoomJoinOptions;
enum FcrRoomState : NSInteger;
enum FcrRecordingState : NSInteger;
@protocol FcrRoomObserver;

SWIFT_PROTOCOL("_TtP7FcrCore14FcrRoomControl_")
@protocol FcrRoomControl <NSObject>
/// get user control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrPrivilegeControl
- (id <FcrPrivilegeControl> _Nullable)getPrivilegeControl SWIFT_WARN_UNUSED_RESULT;
/// get user control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrUserControl
- (id <FcrUserControl> _Nullable)getUserControl SWIFT_WARN_UNUSED_RESULT;
/// get stream control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrStreamControl
- (id <FcrStreamControl> _Nullable)getStreamControl SWIFT_WARN_UNUSED_RESULT;
/// get session control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomSessionControl
- (id <FcrRoomSessionControl> _Nullable)getRoomSessionControl SWIFT_WARN_UNUSED_RESULT;
/// get chat control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrChatRoomControl
- (id <FcrChatRoomControl> _Nullable)getChatRoomControl SWIFT_WARN_UNUSED_RESULT;
/// get board control of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrBoardRoomControl
- (id <FcrBoardRoomControl> _Nullable)getBoardRoomControl SWIFT_WARN_UNUSED_RESULT;
/// get  basic info of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomInfo
- (FcrRoomInfo * _Nullable)getRoomInfo SWIFT_WARN_UNUSED_RESULT;
/// get schedule of this room.
/// note:
/// If the joining of the room is unsuccessful, the value will be empty.
///
/// returns:
/// FcrRoomSchedule
- (FcrRoomSchedule * _Nullable)getRoomSchedule SWIFT_WARN_UNUSED_RESULT;
/// Represents the time in millisecond
- (uint64_t)getSyncTimestamp SWIFT_WARN_UNUSED_RESULT;
- (void)joinWithOptions:(FcrRoomJoinOptions * _Nonnull)options success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)leave;
- (void)startWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)endWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)closeWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (enum FcrRoomState)getRoomState SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getRoomProperties SWIFT_WARN_UNUSED_RESULT;
- (enum FcrRecordingState)getCloudRecordingState SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getRoomPropertiesByKeyPathWithKeyPath:(NSString * _Nonnull)keyPath SWIFT_WARN_UNUSED_RESULT;
- (void)updateRoomPropertiesWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateIncrementRoomPropertiesWithIncrements:(NSDictionary<NSString *, NSNumber *> * _Nonnull)increments cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteRoomPropertiesWithKeyPaths:(NSArray<NSString *> * _Nonnull)keyPaths cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)startCloudRecordingWithConfig:(FcrCloudRecordingConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)pauseCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)resumeCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)stopCloudRecordingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (enum FcrLiveStreamingState)getLiveStreamingState SWIFT_WARN_UNUSED_RESULT;
- (FcrLiveStreamingConfig * _Nullable)getLiveStreamingConfig SWIFT_WARN_UNUSED_RESULT;
- (void)startLiveStreamingWithConfig:(FcrLiveStreamingConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)stopLiveStreamingWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateLiveStreamingLayoutWithLayout:(enum FcrLiveStreamingLayoutType)layout success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)sendRoomMessageWithPayload:(NSDictionary<NSString *, id> * _Nonnull)payload guaranteedDelivery:(BOOL)guaranteedDelivery success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrRoomObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrRoomObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore18FcrMainRoomControl_")
@protocol FcrMainRoomControl <FcrRoomControl>
- (id <FcrGroupControl> _Nullable)getGroupControl SWIFT_WARN_UNUSED_RESULT;
@end

@class AgoraRteVideoRenderConfig;
@class AgoraRteScreenCaptureParams;
@protocol AgoraRteAudioEffectEnhancer;
@protocol AgoraRteVideoEffectEnhancer;
@protocol FcrMediaObserver;
@protocol FcrRecordAudioRawDataObserver;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrMediaControl_")
@protocol FcrMediaControl <NSObject>
- (AgoraError * _Nullable)openDeviceWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)closeDeviceWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteMediaSourceState)getDeviceStateWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceIdWithDeviceType:(enum FcrDeviceType)deviceType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)switchCamera SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteCameraPosition)getCameraPosition SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startCameraPreviewWithConfig:(AgoraRteVideoRenderConfig * _Nonnull)config view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopCameraPreviewWithView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)updateCameraPreviewWithConfig:(AgoraRteVideoRenderConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startCameraTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopCameraTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startMicrophoneTest SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopMicrophoneTest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCapabilitySupportedWithCapability:(AgoraRteCapability)capability SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startScreenCaptureWithParams:(AgoraRteScreenCaptureParams * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopScreenCapture SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)updateScreenCaptureWithHasAudio:(BOOL)hasAudio SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteMediaSourceState)getScreenCaptureState SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)setEnableSpeakerWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
- (AgoraRteAudioOutputRouting)getAudioOutputRouting SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)adjustOutputVolumeWithVolume:(NSUInteger)volume SWIFT_WARN_UNUSED_RESULT;
- (id <AgoraRteAudioEffectEnhancer> _Nullable)getAudioEffectEnhancer SWIFT_WARN_UNUSED_RESULT;
- (id <AgoraRteVideoEffectEnhancer> _Nullable)getVideoEffectEnhancer SWIFT_WARN_UNUSED_RESULT;
- (void)addObserverWithObserver:(id <FcrMediaObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrMediaObserver> _Nonnull)observer;
- (void)addRecordAudioRawDataObserverWithObserver:(id <FcrRecordAudioRawDataObserver> _Nonnull)observer;
- (void)removeRecordAudioRawDataObserverWithObserver:(id <FcrRecordAudioRawDataObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore16FcrMediaObserver_")
@protocol FcrMediaObserver <NSObject>
@optional
- (void)onCameraStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onMicrophoneStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onScreenCaptureStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onSpeakerStateUpdatedWithState:(AgoraRteMediaSourceState)state;
- (void)onMicrophoneVolumeIndicationUpdatedWithVolume:(uint8_t)volume;
- (void)onOutputVolumeIndicationUpdatedWithVolume:(uint8_t)volume;
- (void)onAudioOutputRoutingUpdatedWithRouting:(AgoraRteAudioOutputRouting)routing;
@end


SWIFT_CLASS("_TtC7FcrCore10FcrMessage")
@interface FcrMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull senderId;
@property (nonatomic, readonly) uint64_t timestamp;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FcrMonitorObserver;

SWIFT_PROTOCOL("_TtP7FcrCore17FcrMonitorControl_")
@protocol FcrMonitorControl
- (void)uploadLogWithSuccess:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrMonitorObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrMonitorObserver> _Nonnull)observer;
@end

@class AgoraRtePerformanceInfo;

SWIFT_PROTOCOL("_TtP7FcrCore18FcrMonitorObserver_")
@protocol FcrMonitorObserver <NSObject>
@optional
- (void)onPerformanceUpdatedWithInfo:(AgoraRtePerformanceInfo * _Nonnull)info;
@end


SWIFT_CLASS("_TtC7FcrCore10FcrSession")
@interface FcrSession : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
/// timestamp: start time, represents the time in millisecond
@property (nonatomic, readonly) uint64_t timestamp;
/// timestamp: start time, represents the time in millisecond
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull senderId;
/// interval: Represents the time in millisecond
@property (nonatomic, readonly) uint32_t interval;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore14FcrPeerSession")
@interface FcrPeerSession : FcrSession
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
@end

@class FcrPeerSessionParams;
@protocol FcrPeerSessionObserver;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrPeerSessionControl_")
@protocol FcrPeerSessionControl <NSObject>
- (void)startPeerSessionWithParams:(FcrPeerSessionParams * _Nonnull)params success:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)stopPeerSessionWithSessionId:(NSString * _Nonnull)sessionId;
- (void)acceptPeerSessionWithSession:(FcrPeerSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)rejectPeerSessionWithSession:(FcrPeerSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrPeerSessionObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrPeerSessionObserver> _Nonnull)observer;
@end

@class FcrSessionResponse;

SWIFT_PROTOCOL("_TtP7FcrCore22FcrPeerSessionObserver_")
@protocol FcrPeerSessionObserver <NSObject>
@optional
- (void)onPeerSessionReceivedWithSession:(FcrPeerSession * _Nonnull)session;
- (void)onPeerSessionAcceptedWithResponse:(FcrSessionResponse * _Nonnull)response;
- (void)onPeerSessionRejectedWithResponse:(FcrSessionResponse * _Nonnull)response;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrPeerSessionParams")
@interface FcrPeerSessionParams : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull receiverId;
/// duration: Represents the time in second
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionKey:(NSString * _Nonnull)sessionKey duration:(uint32_t)duration receiverId:(NSString * _Nonnull)receiverId payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrPermissionAction : NSInteger;
@class FcrTargetRoleType;

SWIFT_CLASS("_TtC7FcrCore13FcrPermission")
@interface FcrPermission : NSObject
@property (nonatomic, readonly) enum FcrPermissionAction action;
@property (nonatomic, readonly) id _Nonnull params;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrPermissionAction, open) {
  FcrPermissionActionRoomStart = 0,
  FcrPermissionActionRoomEnd = 1,
  FcrPermissionActionRoomSetPassword = 2,
  FcrPermissionActionRoomJoin = 3,
  FcrPermissionActionRoomLeave = 4,
  FcrPermissionActionRoomLock = 5,
  FcrPermissionActionRoomUnlock = 6,
  FcrPermissionActionUserSetRole = 7,
  FcrPermissionActionUserKickOut = 8,
  FcrPermissionActionUserBlock = 9,
  FcrPermissionActionUserChangeName = 10,
  FcrPermissionActionUserAllowChangeName = 11,
  FcrPermissionActionUserDisallowChangeName = 12,
  FcrPermissionActionUserRevokeRole = 13,
  FcrPermissionActionStreamMuteAudio = 14,
  FcrPermissionActionStreamStartAudio = 15,
  FcrPermissionActionStreamRequestStartAudio = 16,
  FcrPermissionActionStreamAllowStartAudio = 17,
  FcrPermissionActionStreamDisallowStartAudio = 18,
  FcrPermissionActionStreamStopVideo = 19,
  FcrPermissionActionStreamStartVideo = 20,
  FcrPermissionActionStreamRequestStartVideo = 21,
  FcrPermissionActionStreamAllowStartVideo = 22,
  FcrPermissionActionStreamDisallowStartVideo = 23,
  FcrPermissionActionStreamStartScreenSharing = 24,
  FcrPermissionActionStreamStopScreenSharing = 25,
  FcrPermissionActionStreamAllowStartScreenSharing = 26,
  FcrPermissionActionStreamDisallowStartScreenSharing = 27,
  FcrPermissionActionStreamBatchMuteAudio = 28,
  FcrPermissionActionStreamBatchRequestStartAudio = 29,
  FcrPermissionActionStreamDisallowJoinWithMuteAudio = 30,
  FcrPermissionActionStreamAllowJoinWithMuteAudio = 31,
  FcrPermissionActionWaitingRoomEnable = 32,
  FcrPermissionActionWaitingRoomDisable = 33,
  FcrPermissionActionWaitingRoomAddUser = 34,
  FcrPermissionActionWaitingRoomRemoveUser = 35,
  FcrPermissionActionChatSendPublic = 36,
  FcrPermissionActionChatSendPrivate = 37,
  FcrPermissionActionChatAllowSendAll = 38,
  FcrPermissionActionChatDisallowSendAll = 39,
  FcrPermissionActionChatAllowSendPrivate = 40,
  FcrPermissionActionChatDisallowSendPrivate = 41,
  FcrPermissionActionStartCloudRecording = 42,
  FcrPermissionActionPauseCloudRecording = 43,
  FcrPermissionActionResumeCloudRecording = 44,
  FcrPermissionActionStopCloudRecording = 45,
  FcrPermissionActionBoardStart = 46,
  FcrPermissionActionBoardClose = 47,
  FcrPermissionActionBoardWrite = 48,
  FcrPermissionActionBoardAllowStart = 49,
  FcrPermissionActionBoardDisallowStart = 50,
  FcrPermissionActionBoardAllowWrite = 51,
  FcrPermissionActionBoardDisallowWrite = 52,
};


SWIFT_CLASS("_TtC7FcrCore17FcrPermissionInfo")
@interface FcrPermissionInfo : NSObject
@property (nonatomic, readonly) BOOL enable;
@property (nonatomic, readonly, strong) FcrPermission * _Nullable info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore27FcrPermissionInfoAddedEvent")
@interface FcrPermissionInfoAddedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<FcrPermissionInfo *> * _Nonnull permissionInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrPermissionInfoDeletedEvent")
@interface FcrPermissionInfoDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<FcrPermissionInfo *> * _Nonnull permissionInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FcrPrivilegeObserver;
enum FcrSecurityAction : NSInteger;
@class FcrSecurityInfo;

SWIFT_PROTOCOL("_TtP7FcrCore19FcrPrivilegeControl_")
@protocol FcrPrivilegeControl <NSObject>
- (void)addObserverWithObserver:(id <FcrPrivilegeObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrPrivilegeObserver> _Nonnull)observer;
- (FcrSecurityInfo * _Nullable)getSecurityInfoWithAction:(enum FcrSecurityAction)action SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrSecurityInfo *> * _Nullable)getAllSecurityInfo SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrPermissionInfo *> * _Nullable)getAllLocalUserPermissionInfo SWIFT_WARN_UNUSED_RESULT;
- (FcrPermissionInfo * _Nullable)getLocalUserPermissionInfoWithAction:(enum FcrPermissionAction)action SWIFT_WARN_UNUSED_RESULT;
- (void)enableLockedRoomWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareScreenWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareBoardWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowWriteBoardWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowShareWithEnable:(BOOL)enable targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowSendChatWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles payload:(NSDictionary<NSString *, id> * _Nonnull)payload success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowStartAudioWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowStartVideoWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)allowJoinWithMuteAudioWithAllow:(BOOL)allow targetRoles:(FcrTargetRoleType * _Nonnull)targetRoles success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
@end

@class FcrSecurityInfoUpdatedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore20FcrPrivilegeObserver_")
@protocol FcrPrivilegeObserver <NSObject>
@optional
- (void)onSecurityInfoUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrSecurityInfoUpdatedEvent * _Nonnull)event;
- (void)onLocalUserPermissionAddedWithRoomId:(NSString * _Nonnull)roomId event:(FcrPermissionInfoAddedEvent * _Nonnull)event;
- (void)onLocalUserPermissionDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrPermissionInfoDeletedEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL("_TtP7FcrCore29FcrRecordAudioRawDataObserver_")
@protocol FcrRecordAudioRawDataObserver <NSObject>
- (void)onAudioRawDataRecordedWithData:(AgoraRteAudioRawData * _Nonnull)data;
@end

typedef SWIFT_ENUM(NSInteger, FcrRecordingState, open) {
  FcrRecordingStateStarting = 1,
  FcrRecordingStateStarted = 2,
  FcrRecordingStatePaused = 3,
  FcrRecordingStateStopped = 4,
};



SWIFT_CLASS("_TtC7FcrCore11FcrRoomInfo")
@interface FcrRoomInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FcrUserRole : NSInteger;
@class AgoraRteStreamJoinConfig;

SWIFT_CLASS("_TtC7FcrCore18FcrRoomJoinOptions")
@interface FcrRoomJoinOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly) enum FcrUserRole userRole;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable userProperties;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomToken;
@property (nonatomic, readonly) AgoraRteStreamLatencyLevel streamLatency;
@property (nonatomic, copy) NSArray<AgoraRteStreamJoinConfig *> * _Nullable createStreamConfigs;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userRole:(enum FcrUserRole)userRole userProperties:(NSDictionary<NSString *, id> * _Nullable)userProperties roomToken:(NSString * _Nonnull)roomToken streamLatency:(AgoraRteStreamLatencyLevel)streamLatency createStreamConfigs:(NSArray<AgoraRteStreamJoinConfig *> * _Nullable)createStreamConfigs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrRoomPropertiesUpdatedEvent;
@class FcrRoomPropertiesDeletedEvent;
@class AgoraRteNetworkQualityEvent;
@class AgoraRteNetworkStats;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrRoomObserver_")
@protocol FcrRoomObserver <NSObject>
@optional
- (void)onJoinRoomSuccessWithRoomId:(NSString * _Nonnull)roomId;
- (void)onJoinRoomFailureWithRoomId:(NSString * _Nonnull)roomId error:(AgoraError * _Nonnull)error;
- (void)onRoomMessageReceivedWithRoomId:(NSString * _Nonnull)roomId message:(FcrMessage * _Nonnull)message;
- (void)onRoomStateUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrRoomState)state;
- (void)onCloudRecordingStateUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrRecordingState)state;
- (void)onRoomPropertiesUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrRoomPropertiesUpdatedEvent * _Nonnull)event;
- (void)onRoomPropertiesDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrRoomPropertiesDeletedEvent * _Nonnull)event;
- (void)onNetworkQualityUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(AgoraRteNetworkQualityEvent * _Nonnull)event;
- (void)onNetworkStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId stats:(AgoraRteNetworkStats * _Nonnull)stats;
- (void)onLiveStreamingUpdatedWithRoomId:(NSString * _Nonnull)roomId state:(enum FcrLiveStreamingState)state;
@end


SWIFT_CLASS("_TtC7FcrCore29FcrRoomPropertiesDeletedEvent")
@interface FcrRoomPropertiesDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull changedKeyPaths;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrRoomPropertiesUpdatedEvent")
@interface FcrRoomPropertiesUpdatedEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull changedProperties;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore15FcrRoomSchedule")
@interface FcrRoomSchedule : NSObject
/// Represents the time in second
@property (nonatomic, readonly) uint64_t startTime;
/// Represents the time in second
/// If the value is 0, it means there is no time limit for the room
@property (nonatomic, readonly) uint64_t duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore14FcrRoomSession")
@interface FcrRoomSession : FcrSession
- (nonnull instancetype)initWithSessionId:(NSString * _Nonnull)sessionId sessionKey:(NSString * _Nonnull)sessionKey timestamp:(uint64_t)timestamp duration:(uint32_t)duration senderId:(NSString * _Nonnull)senderId interval:(uint32_t)interval payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
@end

@class FcrRoomSessionParams;
@protocol FcrRoomSessionObserver;

SWIFT_PROTOCOL("_TtP7FcrCore21FcrRoomSessionControl_")
@protocol FcrRoomSessionControl <NSObject>
- (void)startRoomSessionWithParams:(FcrRoomSessionParams * _Nonnull)params success:(void (^ _Nullable)(NSString * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)stopRoomSessionWithSessionId:(NSString * _Nonnull)sessionId;
- (void)acceptRoomSessionWithSession:(FcrRoomSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)rejectRoomSessionWithSession:(FcrRoomSession * _Nonnull)session cause:(NSDictionary<NSString *, id> * _Nullable)cause success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrRoomSessionObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrRoomSessionObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP7FcrCore22FcrRoomSessionObserver_")
@protocol FcrRoomSessionObserver <NSObject>
@optional
- (void)onRoomSessionReceivedWithSession:(FcrRoomSession * _Nonnull)session;
- (void)onRoomSessionAcceptedWithResponse:(FcrSessionResponse * _Nonnull)response;
- (void)onRoomSessionRejectedWithResponse:(FcrSessionResponse * _Nonnull)response;
@end


SWIFT_CLASS("_TtC7FcrCore20FcrRoomSessionParams")
@interface FcrRoomSessionParams : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly) uint32_t duration;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)initWithSessionKey:(NSString * _Nonnull)sessionKey duration:(uint32_t)duration payload:(NSDictionary<NSString *, id> * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrRoomState, open) {
  FcrRoomStateInitialized = 0,
  FcrRoomStateStarted = 1,
  FcrRoomStateEnded = 2,
  FcrRoomStateClosed = 3,
};


SWIFT_CLASS("_TtC7FcrCore27FcrScreenStreamCreateConfig")
@interface FcrScreenStreamCreateConfig : NSObject
@property (nonatomic, readonly) AgoraRteStreamType streamType;
- (nonnull instancetype)initWithStreamType:(AgoraRteStreamType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore11FcrSecurity")
@interface FcrSecurity : NSObject
@property (nonatomic, readonly) enum FcrSecurityAction action;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoles;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrSecurityAction, open) {
  FcrSecurityActionPassword = 0,
  FcrSecurityActionLockedRoom = 1,
  FcrSecurityActionWaitingRoom = 2,
  FcrSecurityActionShareScreen = 3,
  FcrSecurityActionChangeName = 4,
  FcrSecurityActionStartAudio = 5,
  FcrSecurityActionStartVideo = 6,
  FcrSecurityActionJoinWithMuteAudio = 7,
  FcrSecurityActionSendChat = 8,
  FcrSecurityActionShareBoard = 9,
  FcrSecurityActionSharing = 10,
};


SWIFT_CLASS("_TtC7FcrCore15FcrSecurityInfo")
@interface FcrSecurityInfo : NSObject
@property (nonatomic, readonly) BOOL enable;
@property (nonatomic, readonly, strong) FcrSecurity * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore27FcrSecurityInfoUpdatedEvent")
@interface FcrSecurityInfoUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrSecurityInfo * _Nonnull securityInfo;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC7FcrCore18FcrSessionResponse")
@interface FcrSessionResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull responderId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull payload;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FcrStreamInfo;
@class AgoraRteStreamCreateConfig;
@class AgoraRteUpdateStreamPrivilege;
@class FcrUpdateStreamPrivilegeScope;
@class AgoraRteSnapshotInfo;
@protocol FcrStreamObserver;

SWIFT_PROTOCOL("_TtP7FcrCore16FcrStreamControl_")
@protocol FcrStreamControl <NSObject>
- (NSDictionary<NSString *, NSArray<FcrStreamInfo *> *> * _Nullable)getStreams SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrStreamInfo *> * _Nullable)getStreamList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrStreamInfo *> * _Nullable)getStreamsByUserIdWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (FcrStreamInfo * _Nullable)getStreamByStreamIdWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (void)addLocalStreamsWithConfigs:(NSArray<AgoraRteStreamCreateConfig *> * _Nonnull)configs success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updatePublishPrivilegeOfStreamsWithPrivileges:(NSDictionary<NSString *, AgoraRteUpdateStreamPrivilege *> * _Nonnull)privileges success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updatePublishPrivilegeOfStreamsWithPrivilege:(AgoraRteUpdateStreamPrivilege * _Nonnull)privilege scope:(FcrUpdateStreamPrivilegeScope * _Nonnull)scope success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeStreamsWithStreams:(NSArray<NSString *> * _Nonnull)streams success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (AgoraError * _Nullable)setVideoEncoderConfigWithStreamId:(NSString * _Nonnull)streamId config:(AgoraRteVideoEncoderConfig * _Nonnull)config streamType:(AgoraRteVideoStreamType)streamType SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startRenderRemoteVideoStreamWithStreamId:(NSString * _Nonnull)streamId config:(AgoraRteVideoRenderConfig * _Nonnull)config type:(AgoraRteVideoStreamType)type view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopRenderRemoteVideoStreamWithStreamId:(NSString * _Nonnull)streamId view:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)startPlayRemoteAudioStreamWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (AgoraError * _Nullable)stopPlayRemoteAudioStreamWithStreamId:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
- (void)takeSnapshotWithStreamId:(NSString * _Nonnull)streamId filePath:(NSString * _Nonnull)filePath success:(void (^ _Nullable)(AgoraRteSnapshotInfo * _Nonnull))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addLocalScreenStreamWithConfig:(FcrScreenStreamCreateConfig * _Nonnull)config success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)removeScreenStreamWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrStreamObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrStreamObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore14FcrStreamEvent")
@interface FcrStreamEvent : NSObject
@property (nonatomic, readonly, strong) FcrStreamInfo * _Nonnull modifiedStream;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore13FcrStreamInfo")
@interface FcrStreamInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull streamId;
@property (nonatomic, readonly, copy) NSString * _Nullable streamName;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull owner;
@property (nonatomic, readonly) AgoraRteStreamType streamType;
@property (nonatomic, readonly) AgoraRteVideoSourceType videoSourceType;
@property (nonatomic, readonly) AgoraRteAudioSourceType audioSourceType;
@property (nonatomic, readonly) AgoraRteMediaSourceState videoSourceState;
@property (nonatomic, readonly) AgoraRteMediaSourceState audioSourceState;
@property (nonatomic, readonly, copy) NSString * _Nullable videoSourceId;
@property (nonatomic, readonly, copy) NSString * _Nullable audioSourceId;
@property (nonatomic, readonly) AgoraRteRoomConnectorType connectorType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AgoraRteLocalVideoStats;
@class AgoraRteLocalAudioStats;
@class AgoraRteRemoteVideoStats;
@class AgoraRteRemoteAudioStats;

SWIFT_PROTOCOL("_TtP7FcrCore17FcrStreamObserver_")
@protocol FcrStreamObserver <NSObject>
@optional
- (void)onStreamsAddedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamsRemovedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamsUpdatedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrStreamEvent *> * _Nonnull)events;
- (void)onStreamVolumeIndicationUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId volume:(uint8_t)volume;
- (void)onLocalStreamVideoStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteLocalVideoStats * _Nonnull)stats;
- (void)onLocalStreamAudioStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteLocalAudioStats * _Nonnull)stats;
- (void)onRemoteStreamVideoStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteRemoteVideoStats * _Nonnull)stats;
- (void)onRemoteStreamAudioStatsUpdatedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId stats:(AgoraRteRemoteAudioStats * _Nonnull)stats;
- (void)onFirstRemoteVideoFrameRenderedWithRoomId:(NSString * _Nonnull)roomId streamId:(NSString * _Nonnull)streamId dimensions:(CGSize)dimensions;
@end


SWIFT_PROTOCOL("_TtP7FcrCore17FcrSubRoomControl_")
@protocol FcrSubRoomControl <FcrRoomControl>
@end


SWIFT_CLASS("_TtC7FcrCore17FcrTargetRoleType")
@interface FcrTargetRoleType : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUpdateStreamPrivilegeScope")
@interface FcrUpdateStreamPrivilegeScope : NSObject
@property (nonatomic, readonly) AgoraRteStreamPrivilegeVideoSourceType videoSourceType;
@property (nonatomic, readonly) AgoraRteStreamPrivilegeAudioSourceType audioSourceType;
@property (nonatomic, readonly, strong) FcrTargetRoleType * _Nonnull targetRoleType;
@property (nonatomic, readonly) BOOL targetRoleIsInclude;
- (nonnull instancetype)initWithVideoSourceType:(AgoraRteStreamPrivilegeVideoSourceType)videoSourceType audioSourceType:(AgoraRteStreamPrivilegeAudioSourceType)audioSourceType targetRoleType:(FcrTargetRoleType * _Nonnull)targetRoleType targetRoleIsInclude:(BOOL)targetRoleIsInclude OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AgoraRteUserPageParams;
enum FcrUserKickedOutType : NSInteger;
@protocol FcrUserObserver;

SWIFT_PROTOCOL("_TtP7FcrCore14FcrUserControl_")
@protocol FcrUserControl <NSObject>
- (FcrUserInfo * _Nonnull)getLocalUser SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, FcrUserInfo *> * _Nonnull)getUsers SWIFT_WARN_UNUSED_RESULT;
- (FcrUserInfo * _Nullable)getUserWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FcrUserInfo *> * _Nonnull)getUserList SWIFT_WARN_UNUSED_RESULT;
- (uint32_t)getAllUserCount SWIFT_WARN_UNUSED_RESULT;
- (void)fetchUserListWithParams:(AgoraRteUserPageParams * _Nonnull)params success:(AgoraRteUserPageCompletion _Nonnull)success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateUserPropertiesWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateIncrementUserPropertiesWithIncrements:(NSDictionary<NSString *, NSNumber *> * _Nonnull)increments cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)deleteUserPropertiesWithKeyPaths:(NSArray<NSString *> * _Nonnull)keyPaths cause:(NSDictionary<NSString *, id> * _Nullable)cause userId:(NSString * _Nonnull)userId success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (NSDictionary<NSString *, id> * _Nullable)getUserProperties SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)getUserPropertiesByUserIdWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)getUserPropertiesByKeyPathWithKeyPath:(NSString * _Nonnull)keyPath userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)kickOutWithUserId:(NSString * _Nonnull)userId type:(enum FcrUserKickedOutType)type success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)updateRemoteUserWithUserId:(NSString * _Nonnull)userId userRole:(enum FcrUserRole)userRole success:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)revokeHostWithSuccess:(void (^ _Nullable)(void))success failure:(void (^ _Nullable)(AgoraError * _Nonnull))failure;
- (void)addObserverWithObserver:(id <FcrUserObserver> _Nonnull)observer;
- (void)removeObserverWithObserver:(id <FcrUserObserver> _Nonnull)observer;
@end


SWIFT_CLASS("_TtC7FcrCore11FcrUserInfo")
@interface FcrUserInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly) enum FcrUserRole userRole;
@property (nonatomic, readonly) AgoraRteRoomConnectorType connectorType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore18FcrUserJoinedEvent")
@interface FcrUserJoinedEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore21FcrUserKickedOutEvent")
@interface FcrUserKickedOutEvent : NSObject
@property (nonatomic, readonly) enum FcrUserKickedOutType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserKickedOutType, open) {
  FcrUserKickedOutTypeOnce = 1,
  FcrUserKickedOutTypeForever = 2,
};


SWIFT_CLASS("_TtC7FcrCore16FcrUserLeftEvent")
@interface FcrUserLeftEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly) enum FcrUserLeftReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserLeftReason, open) {
  FcrUserLeftReasonLeaveRoom = 1,
  FcrUserLeftReasonKickOut = 2,
};

@class FcrUserUpdatedEvent;
@class FcrUserPropertiesUpdatedEvent;
@class FcrUserPropertiesDeletedEvent;

SWIFT_PROTOCOL("_TtP7FcrCore15FcrUserObserver_")
@protocol FcrUserObserver <NSObject>
@optional
- (void)onRemoteUsersJoinedWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrUserJoinedEvent *> * _Nonnull)events;
- (void)onRemoteUsersLeftWithRoomId:(NSString * _Nonnull)roomId events:(NSArray<FcrUserLeftEvent *> * _Nonnull)events;
- (void)onUserUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserUpdatedEvent * _Nonnull)event;
- (void)onAllUserCountUpdatedWithRoomId:(NSString * _Nonnull)roomId count:(uint32_t)count;
- (void)onUserPropertiesUpdatedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserPropertiesUpdatedEvent * _Nonnull)event;
- (void)onUserPropertiesDeletedWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserPropertiesDeletedEvent * _Nonnull)event;
- (void)onLocalUserKickedOutWithRoomId:(NSString * _Nonnull)roomId event:(FcrUserKickedOutEvent * _Nonnull)event;
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUserPropertiesDeletedEvent")
@interface FcrUserPropertiesDeletedEvent : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull changedKeyPaths;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7FcrCore29FcrUserPropertiesUpdatedEvent")
@interface FcrUserPropertiesUpdatedEvent : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull changedProperties;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable cause;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FcrUserRole, open) {
  FcrUserRoleHost = 1,
  FcrUserRoleCohost = 2,
  FcrUserRoleParticipant = 3,
};


SWIFT_CLASS("_TtC7FcrCore19FcrUserUpdatedEvent")
@interface FcrUserUpdatedEvent : NSObject
@property (nonatomic, readonly, strong) FcrUserInfo * _Nonnull modifiedUser;
@property (nonatomic, readonly) AgoraRteUserUpdatedReason reason;
@property (nonatomic, readonly, strong) FcrUserInfo * _Nullable operatorUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
